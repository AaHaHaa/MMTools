% This code acts as a checker for symbolically calculating the rate
% equations of Nd populations.

%% Define variables
syms N0 N1 N2 N3 N4 N5 N6 N7 N8 N9 N10 N11; % populations
syms N_total; % total population = N0+N1+N2+N3+N4+N5+N6+N7+N8+N9+N10+N11
syms A10 A20 A30 A40 A50 A60 A70 A80 A90 A1000 A1100; % spontaneous emission terms
syms A11 A21 A31 A41 A51 A61 A71 A81 A91 A1001 A1101;
syms A12 A22 A32 A42 A52 A62 A72 A82 A92 A1002 A1102;
syms A13 A23 A33 A43 A53 A63 A73 A83 A93 A1003 A1103;
syms A14 A24 A34 A44 A54 A64 A74 A84 A94 A1004 A1104;
syms A15 A25 A35 A45 A55 A65 A75 A85 A95 A1005 A1105;
syms A16 A26 A36 A46 A56 A66 A76 A86 A96 A1006 A1106;
syms A17 A27 A37 A47 A57 A67 A77 A87 A97 A1007 A1107;
syms A18 A28 A38 A48 A58 A68 A78 A88 A98 A1008 A1108;
syms A19 A29 A39 A49 A59 A69 A79 A89 A99 A1009 A1109;
syms A0110 A0210 A0310 A0410 A0510 A0610 A0710 A0810 A0910 A1010 A1110;
syms A0111 A0211 A0311 A0411 A0511 A0611 A0711 A0811 A0911 A1011 A1111;
syms r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11; % multiphonon decay rates; here, "r" stands for "Gamma" symbolically which is more commonly used mathematically for decay
syms we40 we41 we42; % stimulated emission terms
syms wa49; % stimulated absorption terms
syms wa03 wa04 wa05 wa06 wa07 wa08 wa09 wa0010 wa0011;
syms k4438 k4429 k440110 k440011 k4033; % cross-interacting terms, such as cross relaxation and upconversion

N0 = N_total - N1-N2-N3-N4-N5-N6-N7-N8-N9-N10-N11; % make N0 a dependent variable since N_total is given and fixed

%% Coupled equations, dNi/dt (i=0,1,...,11), for each population
dN0dt = A10*N1+A20*N2+A30*N3+A40*N4+A50*N5+A60*N6+A70*N7+A80*N8+A90*N9+A1000*N10+A1100*N11 ...
        + r1*N1 ...
        + we40*N4 ...
        - (wa03 + wa04 + wa05 + wa06 + wa07 + wa08 + wa09 + wa0010 + wa0011)*N0 ...
        + k440011*N4^2 - k4033*N0*N4;
dN1dt = A21*N2+A31*N3+A41*N4+A51*N5+A61*N6+A71*N7+A81*N8+A91*N9+A1001*N10+A1101*N11 ...
        + r2*N2 ...
        - (A10 + r1)*N1 ...
        + we41*N4 ...
        + k440110*N4^2;
dN2dt = A32*N3+A42*N4+A52*N5+A62*N6+A72*N7+A82*N8+A92*N9+A1002*N10+A1102*N11 ...
        + r3*N3 ...
        - (A20 + A21 + r2)*N2 ...
        + we42*N4 ...
        + k4429*N4^2;
dN3dt = A43*N4+A53*N5+A63*N6+A73*N7+A83*N8+A93*N9+A1003*N10+A1103*N11 ...
        + r4*N4 ...
        - (A30 + A31 + A32 + r3)*N3 ...
        + wa03*N0 ...
        + k4438*N4^2 + 2*k4033*N0*N4;
dN4dt = A54*N5+A64*N6+A74*N7+A84*N8+A94*N9+A1004*N10+A1104*N11 ...
        + r5*N5 ...
        - (A40 + A41 + A42 + A43 + r4)*N4 ...
        - we40*N4 - we41*N4 - we42*N4 ...
        + wa04*N0 - wa49*N4 ...
        - 2*(k4438+k4429+k440110+k440011)*N4^2 - k4033*N0*N4;
dN5dt = A65*N6+A75*N7+A85*N8+A95*N9+A1005*N10+A1105*N11 ...
        + r6*N6 ...
        - (A50 + A51 + A52 + A53 + A54 + r5)*N5 ...
        + wa05*N0;
dN6dt = A76*N7+A86*N8+A96*N9+A1006*N10+A1106*N11 ...
        + r7*N7 ...
        - (A60 + A61 + A62 + A63 + A64 + A65 + r6)*N6 ...
        + wa06*N0;
dN7dt = A87*N8+A97*N9+A1007*N10+A1107*N11 ...
        + r8*N8 ...
        - (A70 + A71 + A72 + A73 + A74 + A75 + A76 + r7)*N7 ...
        + wa07*N0;
dN8dt = A98*N9+A1008*N10+A1108*N11 ...
        + r9*N9 ...
        - (A80 + A81 + A82 + A83 + A84 + A85 + A86 + A87 + r8)*N8 ...
        + wa08*N0 ...
        + k4438*N4^2;
dN9dt = A1009*N10+A1109*N11 ...
        + r10*N10 ...
        - (A90 + A91 + A92 + A93 + A94 + A95 + A96 + A97 + A98 + r9)*N9 ...
        + wa09*N0 + wa49*N4 ...
        + k4429*N4^2;
dN10dt = A1110*N11 ...
        + r11*N11 ...
        - (A1000 + A1001 + A1002 + A1003 + A1004 + A1005 + A1006 + A1007 + A1008 + A1009 + r10)*N10 ...
        + wa0010*N0 ...
        + k440110*N4^2;
dN11dt = - (A1100 + A1101 + A1102 + A1103 + A1104 + A1105 + A1106 + A1107 + A1108 + A1109 + A1110 + r11)*N11 ...
        + wa0011*N0 ...
        + k440011*N4^2;

%% Check
disp(simplify(dN0dt+dN1dt+dN2dt+dN3dt+dN4dt+dN5dt+dN6dt+dN7dt+dN8dt+dN9dt+dN10dt+dN11dt)); % This should be zero

% Vary the variables below for calculating the derivatives to find the
% Jacobian matrix
for i = 1:11
    for j = 1:11
        fprintf('dN%udt_N%u = %s\n',i,j,simplify(eval(sprintf('diff(dN%udt,N%u)',i,j)))); % vary it to diff(dN0,dN2), etc. for example
    end
end